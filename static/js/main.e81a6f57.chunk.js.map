{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","completed","handleRemove","bind","toggleForm","handleChange","handleUpdate","handleToggle","this","removeTodo","id","evt","preventDefault","updateTodo","setState","target","name","value","toggleTodo","className","onSubmit","type","onChange","onClick","Component","NewTodoForm","handleSubmit","createTodos","uuid","htmlFor","placeholder","TodoList","todos","create","remove","update","toggleCompletion","newTodo","filter","t","updatedTask","updatedTodos","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e81a6f57.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Todo.css';\r\n\r\n\r\nclass Todo extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isEditing: false,\r\n            task: this.props.task,\r\n            completed: this.props.completed\r\n        }\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleToggle = this.handleToggle.bind(this);\r\n    }\r\n    handleRemove(){\r\n        this.props.removeTodo(this.props.id)\r\n    }\r\n\r\n    handleUpdate(evt){\r\n        evt.preventDefault();\r\n        this.props.updateTodo(this.props.id, this.state.task);\r\n        this.setState({ isEditing: false})\r\n\r\n    }\r\n    handleChange(evt) {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    }\r\n\r\n    handleToggle(evt){\r\n        this.props.toggleTodo(this.props.id);\r\n    }\r\n    toggleForm(){\r\n        this.setState({isEditing: !this.state.isEditing })\r\n    }\r\n    render() {\r\n        let result;\r\n       if (this.state.isEditing){\r\n           result = (\r\n            <div className=\"Todo\">\r\n                <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\r\n                    <input type=\"text\" \r\n                    value={this.state.task} \r\n                    name=\"task\"\r\n                    onChange={this.handleChange}/>\r\n                    <button>Save</button>\r\n                </form>\r\n            </div>\r\n           )\r\n       } else {\r\n           result = (\r\n            <div className=\"Todo\">\r\n             <li \r\n             className={this.props.completed ? \"Todo-task completed\": \"Todo-task\"\r\n             } \r\n             onClick={this.handleToggle}\r\n             >\r\n             {this.props.task}\r\n             </li>\r\n             <div className=\"Todo-buttons\">\r\n             <button onClick={this.toggleForm}>\r\n                 <i className='fas fa-pen'></i>\r\n             </button>\r\n            <button onClick={this.handleRemove}>\r\n            <i className='fas fa-trash'></i>\r\n            </button>\r\n            </div>\r\n            </div>\r\n           )\r\n       }\r\n        return result;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Todo;","import React, { Component } from 'react';\r\nimport uuid from 'uuid/dist/v4';\r\nimport './NewTodoForm.css'\r\n\r\n\r\nclass NewTodoForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            task: \"\"\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleChange(evt) {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit(evt) {\r\n        evt.preventDefault();\r\n        this.props.createTodos({...this.state, id: uuid(), completed: false});\r\n        this.setState({\r\n            task: \"\"\r\n        });\r\n\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n                <label htmlFor='task'>New Todo: </label>\r\n                <input \r\n                type=\"text\"\r\n                id=\"task\"\r\n                placeholder=\"New Todo\"\r\n                name=\"task\"\r\n                value={this.state.task}\r\n                onChange={this.handleChange}\r\n                />\r\n                <button>Enter</button>\r\n\r\n            </form>\r\n\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default NewTodoForm;","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\nimport NewTodoForm from './NewTodoForm';\r\nimport './TodoList.css';\r\n\r\nclass TodoList extends Component {\r\n        constructor(props){\r\n            super(props);\r\n            this.state = {\r\n                todos: []\r\n            };\r\n            this.create = this.create.bind(this);\r\n            this.remove = this.remove.bind(this);\r\n            this.update = this.update.bind(this);\r\n            this.toggleCompletion = this.toggleCompletion.bind(this);\r\n        }\r\n        create(newTodo) {\r\n            this.setState({\r\n                todos: [...this.state.todos, newTodo] \r\n            });\r\n        }\r\n\r\n        remove(id){\r\n            this.setState({\r\n                todos:this.state.todos.filter(t => t.id != id)\r\n            })\r\n        }\r\n\r\n        update(id, updatedTask){\r\n            const updatedTodos = this.state.todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {...todo, task: updatedTask};\r\n                }\r\n                return todo;\r\n            });\r\n            this.setState({ todos: updatedTodos});\r\n        }\r\n\r\n        toggleCompletion(id){\r\n            const updatedTodos = this.state.todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {...todo, completed: !todo.completed };\r\n                }\r\n                return todo;\r\n            });\r\n            this.setState({ todos: updatedTodos});\r\n        }\r\n    render() {\r\nconst todos = this.state.todos.map(todo => {\r\n    return <Todo \r\n    key={todo.id} \r\n    id={todo.id} \r\n    task={todo.task}\r\n    completed={todo.completed} \r\n    removeTodo={this.remove}\r\n    updateTodo={this.update}\r\n    toggleTodo={this.toggleCompletion}\r\n    />;\r\n})\r\n        return (\r\n            <div className=\"TodoList\">\r\n                <h1>Todo List! <span>A simple React Todo List App.</span></h1>\r\n                <ul>{todos}</ul>\r\n                <NewTodoForm  createTodos={this.create}/>\r\n                \r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default TodoList;","import React from 'react';\nimport TodoList from './TodoList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}